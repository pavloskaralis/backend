// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  COACH
  ADMIN
}

model User {
  id          Int      @id @default(autoincrement())
  displayName String   @unique @map("display_name")
  email       String   @unique
  password    String
  role        Role
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  refreshToken RefreshToken?

  views         View[]
  engagements   Engagement[]
  featureEvents FeatureEvent[]
  posts         Post[]

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  viewCount Int      @default(0) @map("view_count")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  authorId Int    @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])
  views    View[]

  categories PostsCategories[]

  @@map("posts")
}

model View {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId, createdAt])
  @@map("views")
}

model Category {
  id        Int      @id @default(autoincrement())
  label     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  posts       PostsCategories[]
  engagements Engagement[]

  @@map("categories")
}

model Engagement {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  categoryId Int      @map("category_id")
  viewCount  Int      @default(0) @map("view_count")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId])
  @@map("engagements")
}

model PostsCategories {
  id         Int      @id @default(autoincrement())
  postId     Int      @map("post_id")
  categoryId Int      @map("category_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  post     Post     @relation(fields: [postId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([postId, categoryId])
  @@map("posts_categories")
}

model FeatureEvent {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  featureKey String   @map("feature_key")
  event      String
  enabled    Boolean
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("feature_events")
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
  token  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("refresh_token")
}
