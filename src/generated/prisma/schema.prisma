// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement()) @map("id")
  email     String    @unique
  password  String
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  phone     String?
  type      UserType
  customer  Customer?
  doctor    Doctor?
  address   Address   @relation(fields: [addressId], references: [id])
  addressId Int       @unique @map("address_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Address {
  id        Int      @id @default(autoincrement()) @map("id")
  street    String
  zip       String
  state     State
  user      User?    @relation
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("addresses")
}

model Customer {
  id        Int       @id @default(autoincrement()) @map("id")
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique @map("user_id")
  bookings  Booking[]
  ratings   Rating[]  @relation("CustomerRatings")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("customers")
}

model Doctor {
  id        Int        @id @default(autoincrement()) @map("id")
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique @map("user_id")
  bio       String
  licenses  License[]
  timeSlots TimeSlot[]
  bookings  Booking[]  @relation("DoctorBookings")
  ratings   Rating[]   @relation("DoctorRatings")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("doctors")
}

model License {
  id        Int      @id @default(autoincrement()) @map("id")
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int      @map("doctor_id")
  state     State
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([state, active])
  @@map("licenses")
}

model TimeSlot {
  id        Int       @id @default(autoincrement()) @map("id")
  doctor    Doctor    @relation(fields: [doctorId], references: [id])
  doctorId  Int       @map("doctor_id")
  start     DateTime
  end       DateTime
  recurring Boolean   @default(false)
  bookings  Booking[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("time_slots")
}

model Booking {
  id            Int            @id @default(autoincrement()) @map("id")
  customer      Customer       @relation(fields: [customerId], references: [id])
  customerId    Int            @map("customer_id")
  timeSlot      TimeSlot       @relation(fields: [timeSlotId], references: [id])
  timeSlotId    Int            @map("time_slot_id")
  doctor        Doctor         @relation("DoctorBookings", fields: [doctorId], references: [id])
  doctorId      Int            @map("doctor_id")
  date          DateTime
  status        BookingStatus
  notifications Notification[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@unique([timeSlotId, date])
  @@map("bookings")
}

model Notification {
  id        Int      @id @default(autoincrement()) @map("id")
  subject   String
  body      String
  to        String
  from      String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @map("booking_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model Rating {
  id         Int      @id @default(autoincrement()) @map("id")
  doctor     Doctor   @relation("DoctorRatings", fields: [doctorId], references: [id])
  doctorId   Int      @map("doctor_id")
  customer   Customer @relation("CustomerRatings", fields: [customerId], references: [id])
  customerId Int      @map("customer_id")
  score      Int
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("ratings")
}

enum UserType {
  CUSTOMER
  DOCTOR
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
